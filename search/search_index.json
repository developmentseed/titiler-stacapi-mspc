{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"titiler-stacapi-mspc","text":"<p> <p>Connect titiler to MS Planetary Computer STAC API</p> </p> <p> </p> <p>Documentation: developmentseed.org/titiler-stacapi-mspc/</p> <p>Source Code: developmentseed/titiler-stacapi-mspc</p>"},{"location":"#installation","title":"Installation","text":"<p>Install from sources and run for development:</p> <pre><code>$ git clone https://github.com/developmentseed/titiler-stacapi-mspc.git\n$ cd titiler-stacapi-mspc\n$ python -m pip install -e .\n</code></pre>"},{"location":"#launch","title":"Launch","text":"<p>By default the <code>stac_api_url</code> is planetarycomputer.microsoft.com/api/stac/v1, but you can override it by setting the environment variable <code>TITILER_STACAPI_STAC_API_URL</code>.</p> <pre><code>python -m pip install uvicorn\n\nuvicorn titiler.stacapi.main:app --port 8000\n</code></pre>"},{"location":"#using-docker","title":"Using Docker","text":"<pre><code>$ git clone https://github.com/developmentseed/titiler-stacapi-mspc.git\n$ cd titiler-stacapi-mspc\n$ docker-compose up --build api\n</code></pre> <p>It runs <code>titiler.stacapi</code> using Gunicorn web server.</p>"},{"location":"#how-it-works","title":"How it works","text":""},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>See contributors for a listing of individual contributors.</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGELOG.md.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/titiler-stacapi/issues</p> <p>dev install</p> <pre><code>git clone https://github.com/developmentseed/titiler-stacapi.git\ncd titiler-stacapi\n\npython -m pip install pre-commit -e .[\"dev,test\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov titiler.stacapi --cov-report term-missing\n</code></pre> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"technical-considerations/","title":"Technical Considerations","text":""},{"location":"technical-considerations/#optimizing-tile-requests-in-titiler-stacapi","title":"Optimizing Tile Requests in titiler-stacapi","text":"<p>To enhance the efficiency of tile requests in titiler-stacapi, it's essential to set appropriate zoom levels and bounding boxes and be mindful of the number of requests made to the STAC API. This guide will walk you through understanding and applying these settings to improve performance and avoid overloading the service with expansive queries.</p>"},{"location":"technical-considerations/#understanding-zoom-levels","title":"Understanding Zoom Levels","text":"<p>Zoom levels dictate the level of detail in the tiles requested. Specifying a range (min/max) can significantly optimize request times and resource usage.</p>"},{"location":"technical-considerations/#bounding-box-considerations","title":"Bounding Box Considerations","text":"<p>The bounding box limits the geographical area of interest, preventing unnecessarily broad tile generation. Define this based on your application's specific needs to reduce load times and server strain.</p>"},{"location":"technical-considerations/#mindful-usage-of-stac-api-requests","title":"Mindful Usage of STAC API Requests","text":"<p>Each tile request to titiler-stacapi results in one request to a STAC API <code>/search</code>. It's vital to use this feature respectfully towards STAC API providers by being aware of the request load. High volumes of tile requests translate to an equal number of STAC API requests, which could overwhelm the API endpoints.</p> <p>For detailed examples and more on optimizing your usage of titiler-stacapi, refer to the project's primary documentation.</p>"},{"location":"endpoints/","title":"Endpoints","text":"<p>By default the main application (<code>titiler.pgstac.main.app</code>) provides three sets of endpoints:</p> <ul> <li>Collections: Dynamic mosaic tiler based on STAC Collection</li> <li>Items: Dynamic tiler for single STAC item (stored in PgSTAC)</li> <li>TileMatrixSet: Available TileMatrixSets for the service</li> </ul>"},{"location":"endpoints/collections_endpoints/","title":"Collections","text":""},{"location":"endpoints/collections_endpoints/#stac-collections-endpoints","title":"STAC Collections endpoints","text":"Method URL Output Description <code>GET</code> <code>/collections/{collection_id}/tiles/{TileMatrixSetId}/{z}/{x}/{y}[@{scale}x][.{format}]</code> image/bin Create a web map tile image for a collection and a tile index <code>GET</code> <code>/collections/{collection_id}/{TileMatrixSetId}/tilejson.json</code> JSON (TileJSON) Return a Mapbox TileJSON document <code>GET</code> <code>/collections/{collection_id}/{TileMatrixSetId}/map</code> HTML simple map viewer"},{"location":"endpoints/collections_endpoints/#tiles","title":"Tiles","text":"<p><code>:endpoint:/collections/{collection_id}/tiles/{TileMatrixSetId}/{z}/{x}/{y}[@{scale}x][.{format}]</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id: STAC Collection Identifier.</li> <li>TileMatrixSetId: TileMatrixSet name (e.g <code>WebMercatorQuad</code>).</li> <li>z: Tile's zoom level.</li> <li>x: Tile's column.</li> <li>y: Tile's row.</li> <li>scale: Tile size scale, default is set to 1 (256x256). OPTIONAL</li> <li>format: Output image format, default is set to None and will be either JPEG or PNG depending on masked value. OPTIONAL</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band index (e.g <code>Asset1|1;2;3</code>).</li> <li>nodata: Overwrite internal Nodata value. OPTIONAL</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>buffer (float): Buffer on each side of the given tile. It must be a multiple of <code>0.5</code>. Output tilesize will be expanded to <code>tilesize + 2 * buffer</code> (e.g 0.5 = 257x257, 1.0 = 258x258).</li> <li>padding (int): Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to <code>0</code></li> <li>pixel_selection (str): Pixel selection method (cogeotiff.github.io/rio-tiler/mosaic/).</li> </ul> </li> <li> <p>STAC API Search QueryParams:</p> <ul> <li>ids (str): Comma (',') delimited list of IDS.</li> <li>bbox (str): Comma (',') delimited BoundingBox (not used in the search query, but usefull to limit the bbox of the mosaic).</li> <li>datetime (str): Datetime filter for the Search Query following <code>RFC 3339</code> format (github.com/radiantearth/stac-api-spec/blob/v1.0.0/implementation.md#datetime-parameter-handling)</li> <li>limit (int): The maximum number of results to return (page size). Defaults to 10.</li> <li>max_items (int): The maximum number of items to used in a mosaic. Defaults to 100.</li> </ul> </li> </ul> <p>Important</p> <p>assets OR expression is required</p> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/my-collection/tiles/WebMercatorQuad/1/2/3?assets=B01</code></li> <li><code>https://myendpoint/collections/my-collection/tiles/WebMercatorQuad/1/2/3.jpg?assets=B01</code></li> <li><code>https://myendpoint/collections/my-collection/tiles/WorldCRS84Quad/1/2/3@2x.png?assets=B01&amp;assets=B02&amp;assets=B03</code></li> <li><code>https://myendpoint/collections/my-collection/tiles/WorldCRS84Quad/1/2/3?assets=B01&amp;rescale=0,1000&amp;colormap_name=cfastie</code></li> </ul>"},{"location":"endpoints/collections_endpoints/#tilesjson","title":"TilesJSON","text":"<p><code>:endpoint:/collections/{collection_id}[/{TileMatrixSetId}]/tilejson.json</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id: STAC Collection Identifier.</li> <li>TileMatrixSetId: TileMatrixSet name (e.g <code>WebMercatorQuad</code>).</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>tile_format: Output image format, default is set to None and will be either JPEG or PNG depending on masked value.</li> <li>tile_scale: Tile size scale, default is set to 1 (256x256). OPTIONAL</li> <li>minzoom: Overwrite default minzoom. OPTIONAL</li> <li>maxzoom: Overwrite default maxzoom. OPTIONAL</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band index (e.g <code>Asset1|1;2;3</code>).</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>buffer (float): Buffer on each side of the given tile. It must be a multiple of <code>0.5</code>. Output tilesize will be expanded to <code>tilesize + 2 * buffer</code> (e.g 0.5 = 257x257, 1.0 = 258x258).</li> <li>padding (int): Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to <code>0</code></li> <li>pixel_selection (str): Pixel selection method (cogeotiff.github.io/rio-tiler/mosaic/).</li> </ul> </li> <li> <p>STAC API Search QueryParams:</p> <ul> <li>ids (str): Comma (',') delimited list of IDS.</li> <li>bbox (str): Comma (',') delimited BoundingBox (not used in the search query, but usefull to limit the bbox of the mosaic).</li> <li>datetime (str): Datetime filter for the Search Query following <code>RFC 3339</code> format (github.com/radiantearth/stac-api-spec/blob/v1.0.0/implementation.md#datetime-parameter-handling)</li> <li>limit (int): The maximum number of results to return (page size). Defaults to 10.</li> <li>max_items (int): The maximum number of items to used in a mosaic. Defaults to 100.</li> </ul> </li> </ul> <p>Important</p> <p>assets OR expression is required</p> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/my-collection/WebMercatorQuad/tilejson.json?assets=B01</code></li> <li><code>https://myendpoint/collections/my-collection/WebMercatorQuad/tilejson.json?assets=B01&amp;tile_format=png</code></li> <li><code>https://myendpoint/collections/my-collection/WorldCRS84Quad/tilejson.json?assets=B01&amp;tile_scale=2</code></li> </ul>"},{"location":"endpoints/items_endpoints/","title":"Items","text":""},{"location":"endpoints/items_endpoints/#stac-items-endpoints","title":"STAC Items endpoints","text":"<p>The <code>Item</code> endpoints are created using TiTiler's MultiBaseTilerFactory</p> Method URL Output Description <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/bounds</code> JSON (Bounds) return dataset's bounds <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/assets</code> JSON return the list of available assets <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/info</code> JSON (Info) return assets basic info <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/info.geojson</code> GeoJSON (InfoGeoJSON) return assets basic info as a GeoJSON feature <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/asset_statistics</code> JSON (Statistics) return per asset statistics <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/statistics</code> JSON (Statistics) return assets statistics (merged) <code>POST</code> <code>/collections/{collection_id}/items/{item_id}/statistics</code> GeoJSON (Statistics) return assets statistics for a GeoJSON (merged) <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/tiles[/{TileMatrixSetId}]/{z}/{x}/{y}[@{scale}x][.{format}]</code> image/bin create a web map tile image from assets <code>GET</code> <code>/collections/{collection_id}/items/{item_id}[/{TileMatrixSetId}]/tilejson.json</code> JSON (TileJSON) return a Mapbox TileJSON document <code>GET</code> <code>/collections/{collection_id}/items/{item_id}[/{TileMatrixSetId}]/WMTSCapabilities.xml</code> XML return OGC WMTS Get Capabilities <code>GET</code> <code>/collections/{collection_id}/items/{item_id}[/{TileMatrixSetId}]/map</code> HTML simple map viewer <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/point/{lon},{lat}</code> JSON (Point) return pixel values from assets <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/preview[.{format}]</code> image/bin create a preview image from assets <code>GET</code> <code>/collections/{collection_id}/items/{item_id}/bbox/{minx},{miny},{maxx},{maxy}[/{width}x{height}].{format}</code> image/bin create an image from part of assets <code>POST</code> <code>/collections/{collection_id}/items/{item_id}/feature[/{width}x{height}][.{format}]</code> image/bin create an image from a geojson feature intersecting assets"},{"location":"endpoints/items_endpoints/#tiles","title":"Tiles","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/tiles[/{TileMatrixSetId}]/{z}/{x}/{y}[@{scale}x][.{format}]</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>TileMatrixSetId (str): TileMatrixSet name, default is <code>WebMercatorQuad</code>. Optional</li> <li>z (int): TMS tile's zoom level.</li> <li>x (int): TMS tile's column.</li> <li>y (int): TMS tile's row.</li> <li>scale (int): Tile size scale, default is set to 1 (256x256). Optional</li> <li>format (str): Output image format, default is set to None and will be either JPEG or PNG depending on masked value. Optional</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>buffer (float): Buffer on each side of the given tile. It must be a multiple of <code>0.5</code>. Output tilesize will be expanded to <code>tilesize + 2 * buffer</code> (e.g 0.5 = 257x257, 1.0 = 258x258).</li> <li>padding (int): Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to <code>0</code></li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> </ul> </li> </ul> <p>Important</p> <p>assets OR expression is required</p> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tiles/1/2/3?assets=B01&amp;assets=B00</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tiles/1/2/3.jpg?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tiles/WorldCRS84Quad/1/2/3@2x.png?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tiles/WorldCRS84Quad/1/2/3?expression=B01/B02&amp;rescale=0,1000&amp;colormap_name=cfastie&amp;asset_as_band=True</code></li> </ul>"},{"location":"endpoints/items_endpoints/#preview","title":"Preview","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/preview[.{format}]</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>format: Output image format, default is set to None and will be either JPEG or PNG depending on masked value. Optional</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>max_size (int): Max image size, default is 1024.</li> <li>height (int): Force output image height.</li> <li>width (int): Force output image width.</li> <li>dst_crs (str): Output Coordinate Reference System. Default to dataset's CRS.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> </ul> </li> </ul> <p>Important</p> <ul> <li> <p>assets OR expression is required</p> </li> <li> <p>if height and width are provided max_size will be ignored.</p> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/preview?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/preview.jpg?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/preview?assets=B01&amp;rescale=0,1000&amp;colormap_name=cfastie</code></li> </ul>"},{"location":"endpoints/items_endpoints/#bboxfeature","title":"BBOX/Feature","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/bbox/{minx},{miny},{maxx},{maxy}.{format}</code> <code>:endpoint:/collections/{collection_id}/items/{item_id}/bbox/{minx},{miny},{maxx},{maxy}/{width}x{height}.{format}</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>minx,miny,maxx,maxy (str): Comma (',') delimited bounding box in WGS84.</li> <li>height (int): Force output image height. Optional</li> <li>width (int): Force output image width. Optional</li> <li>format (str): Output image format, default is set to None and will be either JPEG or PNG depending on masked value. Optional</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>max_size (int): Max image size.</li> <li>coord_crs (str): Coordinate Reference System of the input coordinates. Default to <code>epsg:4326</code>.</li> <li>dst_crs (str): Output Coordinate Reference System. Default to <code>coord_crs</code>.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> </ul> </li> </ul> <p>Important</p> <ul> <li> <p>assets OR expression is required</p> </li> <li> <p>if height and width are provided max_size will be ignored.</p> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/bbox/0,0,10,10.png?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/bbox/0,0,10,10.png?assets=B01&amp;rescale=0,1000&amp;colormap_name=cfastie</code></li> </ul> <p><code>:endpoint:/collections/{collection_id}/items/{item_id}/feature[/{width}x{height}][].{format}] - [POST]</code></p> <ul> <li> <p>Body:</p> <ul> <li>feature (JSON): A valid GeoJSON feature (Polygon or MultiPolygon)</li> </ul> </li> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>height (int): Force output image height. Optional</li> <li>width (int): Force output image width. Optional</li> <li>format (str): Output image format, default is set to None and will be either JPEG or PNG depending on masked value. Optional</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>max_size (int): Max image size.</li> <li>coord_crs (str): Coordinate Reference System of the input coordinates. Default to <code>epsg:4326</code>.</li> <li>dst_crs (str): Output Coordinate Reference System. Default to <code>coord_crs</code>.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> </ul> </li> </ul> <p>Important</p> <ul> <li> <p>assets OR expression is required</p> </li> <li> <p>if height and width are provided max_size will be ignored.</p> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/crop?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/crop.png?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/100x100.png?assets=B01&amp;rescale=0,1000&amp;colormap_name=cfastie</code></li> </ul>"},{"location":"endpoints/items_endpoints/#point","title":"Point","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/point/{lon},{lat}</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>lon,lat, (str): Comma (',') delimited point Longitude and Latitude WGS84.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> </ul> </li> </ul> <p>Important</p> <p>assets OR expression is required</p> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/point/0,0?assets=B01</code></li> </ul>"},{"location":"endpoints/items_endpoints/#tilesjson","title":"TilesJSON","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}[/{TileMatrixSetId}]/tilejson.json</code> tileJSON document</p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> <li>TileMatrixSetId: TileMatrixSet name, default is <code>WebMercatorQuad</code>.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>tile_format (str): Output image format, default is set to None and will be either JPEG or PNG depending on masked value.</li> <li>tile_scale (int): Tile size scale, default is set to 1 (256x256).</li> <li>minzoom (int): Overwrite default minzoom.</li> <li>maxzoom (int): Overwrite default maxzoom.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>algorithm (str): Custom algorithm name (e.g <code>hillshade</code>).</li> <li>algorithm_params (str): JSON encoded algorithm parameters.</li> <li>rescale (array[str]): Comma (',') delimited Min,Max range (e.g <code>rescale=0,1000</code>, <code>rescale=0,1000&amp;rescale=0,3000&amp;rescale=0,2000</code>).</li> <li>color_formula (str): rio-color formula.</li> <li>colormap (str): JSON encoded custom Colormap.</li> <li>colormap_name (str): rio-tiler color map name.</li> <li>return_mask (bool): Add mask to the output data. Default is True.</li> <li>buffer (float): Buffer on each side of the given tile. It must be a multiple of <code>0.5</code>. Output tilesize will be expanded to <code>tilesize + 2 * buffer</code> (e.g 0.5 = 257x257, 1.0 = 258x258).</li> <li>padding (int): Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to <code>0</code></li> </ul> </li> </ul> <p>Important</p> <p>assets OR expression is required</p> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tilejson.json?assets=B01</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/tilejson.json?assets=B01&amp;tile_format=png</code></li> <li><code>https://myendpoint/collections/mycollection/items/oneitem/WorldCRS84Quad/tilejson.json?tile_scale=2&amp;expression=B01/B02&amp;asset_as_band=True</code></li> </ul>"},{"location":"endpoints/items_endpoints/#bounds","title":"Bounds","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/bounds</code> - Return the bounds of the STAC item.</p> <ul> <li>PathParams:<ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/bounds</code></li> </ul>"},{"location":"endpoints/items_endpoints/#info","title":"Info","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/info</code> - Return basic info on STAC item's COG.</p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names. Default to all available assets.</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/info?assets=B01</code></li> </ul> <p><code>:endpoint:/collections/{collection_id}/items/{item_id}/info.geojson</code> - Return basic info on STAC item's COG as a GeoJSON feature</p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>collection (str): STAC Collection Identifier. Required</li> <li>item (str): STAC Item Identifier. Required</li> <li>assets (array[str]): asset names. Default to all available assets.</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/info.geojson?assets=B01</code></li> </ul> <p><code>:endpoint:/collections/{collection_id}/items/{item_id}/assets</code> - Return the list of available assets</p>"},{"location":"endpoints/items_endpoints/#available-assets","title":"Available Assets","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/assets</code> - Return a list of available assets</p> <ul> <li>PathParams:<ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/assets</code></li> </ul>"},{"location":"endpoints/items_endpoints/#statistics","title":"Statistics","text":"<p><code>:endpoint:/collections/{collection_id}/items/{item_id}/asset_statistics - [GET]</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>collection (str): STAC Collection Identifier. Required</li> <li>item (str): STAC Item Identifier. Required</li> <li>assets (array[str]): asset names. Default to all available assets.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>asset_expression (array[str]): Per asset band math expression (e.g <code>Asset1|b1\\*b2</code>).</li> <li>max_size (int): Max image size from which to calculate statistics, default is 1024.</li> <li>height (int): Force image height from which to calculate statistics.</li> <li>width (int): Force image width from which to calculate statistics.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>categorical (bool): Return statistics for categorical dataset, default is false.</li> <li>c (array[float]): Pixels values for categories.</li> <li>p (array[int]): Percentile values.</li> <li>histogram_bins (str): Histogram bins.</li> <li>histogram_range (str): Comma (',') delimited Min,Max histogram bounds</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/statistics?assets=B01&amp;categorical=true&amp;c=1&amp;c=2&amp;c=3&amp;p=2&amp;p98</code></li> </ul> <p><code>:endpoint:/collections/{collection_id}/items/{item_id}/statistics - [GET]</code></p> <ul> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>collection (str): STAC Collection Identifier. Required</li> <li>item (str): STAC Item Identifier. Required</li> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>max_size (int): Max image size from which to calculate statistics, default is 1024.</li> <li>height (int): Force image height from which to calculate statistics.</li> <li>width (int): Force image width from which to calculate statistics.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>categorical (bool): Return statistics for categorical dataset, default is false.</li> <li>c (array[float]): Pixels values for categories.</li> <li>p (array[int]): Percentile values.</li> <li>histogram_bins (str): Histogram bins.</li> <li>histogram_range (str): Comma (',') delimited Min,Max histogram bounds</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/statistics?assets=B01&amp;categorical=true&amp;c=1&amp;c=2&amp;c=3&amp;p=2&amp;p98</code></li> </ul> <p><code>:endpoint:/collections/{collection_id}/items/{item_id}/statistics - [POST]</code></p> <ul> <li> <p>Body:</p> <ul> <li>feature (JSON): A valid GeoJSON feature or FeatureCollection</li> </ul> </li> <li> <p>PathParams:</p> <ul> <li>collection_id (str): STAC Collection Identifier.</li> <li>item_id (str): STAC Item Identifier.</li> </ul> </li> <li> <p>QueryParams:</p> <ul> <li>assets (array[str]): asset names.</li> <li>expression (str): rio-tiler's math expression with asset names (e.g <code>Asset1_b1/Asset2_b1</code>).</li> <li>asset_as_band (bool): tell rio-tiler that each asset is a 1 band dataset, so expression <code>Asset1/Asset2</code> can be passed.</li> <li>asset_bidx (array[str]): Per asset band math expression (e.g <code>Asset1|1;2;3</code>).</li> <li>max_size (int): Max image size from which to calculate statistics.</li> <li>height (int): Force image height from which to calculate statistics.</li> <li>width (int): Force image width from which to calculate statistics.</li> <li>coord_crs (str): Coordinate Reference System of the input coordinates. Default to <code>epsg:4326</code>.</li> <li>dst_crs (str): Output Coordinate Reference System. Default to <code>coord_crs</code>.</li> <li>nodata (str, int, float): Overwrite internal Nodata value.</li> <li>unscale (bool): Apply dataset internal Scale/Offset.</li> <li>resampling (str): RasterIO resampling algorithm. Defaults to <code>nearest</code>.</li> <li>reproject (str): WarpKernel resampling algorithm (only used when doing re-projection). Defaults to <code>nearest</code>.</li> <li>categorical (bool): Return statistics for categorical dataset, default is false.</li> <li>c (array[float]): Pixels values for categories.</li> <li>p (array[int]): Percentile values.</li> <li>histogram_bins (str): Histogram bins.</li> <li>histogram_range (str): Comma (',') delimited Min,Max histogram bounds</li> </ul> </li> </ul> <p>Example:</p> <ul> <li><code>https://myendpoint/collections/mycollection/items/oneitem/statistics?assets=B01&amp;categorical=true&amp;c=1&amp;c=2&amp;c=3&amp;p=2&amp;p98</code></li> </ul>"},{"location":"endpoints/tms_endpoints/","title":"TileMatrixSet","text":"Method URL Output Description <code>GET</code> <code>/tileMatrixSets</code> JSON (TMS list) return the list of supported TileMatrixSet <code>GET</code> <code>/tileMatrixSets/{TileMatrixSetId}</code> JSON (TileMatrixSet) return the TileMatrixSet JSON document"},{"location":"endpoints/tms_endpoints/#list-tms","title":"List TMS","text":"<p><code>:endpoint:/tileMatrixSets</code> - Get the list of supported TileMatrixSet</p> <pre><code>curl https://myendpoint/tileMatrixSets | jq\n&gt;&gt; {\n  \"tileMatrixSets\": [\n    {\n      \"id\": \"LINZAntarticaMapTilegrid\",\n      \"title\": \"LINZ Antarctic Map Tile Grid (Ross Sea Region)\",\n      \"links\": [\n        {\n          \"href\": \"https://myendpoint/tileMatrixSets/LINZAntarticaMapTilegrid\",\n          \"rel\": \"item\",\n          \"type\": \"application/json\"\n        }\n      ]\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"endpoints/tms_endpoints/#get-tms-info","title":"Get TMS info","text":"<p><code>:endpoint:/tileMatrixSets/{TileMatrixSetId}</code> - Get the TileMatrixSet JSON document</p> <ul> <li>PathParams:<ul> <li>TileMatrixSetId: TileMatrixSet name</li> </ul> </li> </ul> <pre><code>curl http://127.0.0.1:8000/tileMatrixSets/WebMercatorQuad | jq\n&gt;&gt; {\n  \"type\": \"TileMatrixSetType\",\n  \"title\": \"Google Maps Compatible for the World\",\n  \"identifier\": \"WebMercatorQuad\",\n  \"supportedCRS\": \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n  \"wellKnownScaleSet\": \"http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible\",\n  \"boundingBox\": {\n    \"type\": \"BoundingBoxType\",\n    \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"lowerCorner\": [\n      -20037508.3427892,\n      -20037508.3427892\n    ],\n    \"upperCorner\": [\n      20037508.3427892,\n      20037508.3427892\n    ]\n  },\n  \"tileMatrix\": [\n    {\n      \"type\": \"TileMatrixType\",\n      \"identifier\": \"0\",\n      \"scaleDenominator\": 559082264.028717,\n      \"topLeftCorner\": [\n        -20037508.3427892,\n        20037508.3427892\n      ],\n      \"tileWidth\": 256,\n      \"tileHeight\": 256,\n      \"matrixWidth\": 1,\n      \"matrixHeight\": 1\n    },\n    ...\n</code></pre>"}]}